<html><head><title>[ModIsom] 1 Introduction</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP002.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>1 Introduction</h1><p>
<p>
This package contains various algorithms related to finite dimensional 
nilpotent associative algebras. It also contains many group-theoretical
functions related to the Modular Isomorphism Problem.
We first give a brief introduction to finite dimensional
nilpotent algebras and then an overview of the main algorithms.
<p>
<p>
<hr>Associative algebras and nilpotency
<p>
Let <i>A</i> be an associative algebra of dimension <i>d</i> over a field <i>F</i>.
Let {<i>b</i><sub>1</sub>, &#8230;, <i>b</i><sub><i>d</i></sub>} be a basis for <i>A</i>. We identify the 
element <i>x</i><sub>1</sub> <i>b</i><sub>1</sub> + &#8230;+ <i>x</i><sub><i>d</i></sub> <i>b</i><sub><i>d</i></sub> of <i>A</i> with the element 
(<i>x</i><sub>1</sub>, &#8230;, <i>x</i><sub><i>d</i></sub>) of <i>F</i><sup><i>d</i></sup>. The multiplication of <i>A</i> can then 
be described by a <strong>structure constants table</strong>: a 3-dimensional array 
with entries <i>a</i><sub><i>i</i>,<i>j</i>,<i>k</i></sub>  &#8712; <i>F</i> satisfying that
<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"><i>b</i><sub><i>i</i></sub> <i>b</i><sub><i>j</i></sub> = </td><td nowrap="nowrap" align="center"><small><i>d</i></small><!--sup--><br /><span class="largerstill">&#8721;<br /></span><small><i>k</i>=1</small>&nbsp;<br /></td><td nowrap="nowrap" align="center"><i>a</i><sub><i>i</i>,<i>j</i>,<i>k</i></sub> <i>b</i><sub><i>k</i></sub>&#183;</td></tr></table></td></tr></table>
<p>
<p>
An associative algebra <i>A</i> is <strong>nilpotent</strong> if its <strong>power series</strong> terminates
at the trivial ideal of <i>A</i>; that is
<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"> <i>A</i>  &gt;  <i>A</i><sup>2</sup>  &gt;  &#8230; &gt;  <i>A</i><sup><i>c</i></sup>  &gt;  <i>A</i><sup><i>c</i>+1</sup> = {0} </td></tr></table></td></tr></table>
where <i>A</i><sup><i>j</i></sup> is the ideal of <i>A</i> generated by all products of length 
at least <i>j</i>. The length <i>c</i> of the power series is also called the 
<strong>class</strong> of <i>A</i> and the dimension of <i>A</i>/<i>A</i><sup>2</sup> is the <strong>rank</strong> of <i>A</i>. Note
that <i>A</i> is generated by <i>dim</i>(<i>A</i>/<i>A</i><sup>2</sup>) elements. Clearly, <i>A</i> does not 
contain a multiplicative identity. 
<p>
<p>
For computational purposes we describe a nilpotent associative algebra by 
a weighted basis and a description of the corresponding structure constants 
table. A basis of a nilpotent associative algebra <i>A</i> is <strong>weighted</strong> if
there is a sequence of weights (<i>w</i><sub>1</sub>, &#8230;, <i>w</i><sub><i>d</i></sub>) so that
<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"><i>A</i><sup><i>j</i></sup> = &#9001;<i>b</i><sub><i>i</i></sub>  | <i>w</i><sub><i>i</i></sub>  &#8805; <i>j</i> &#9002;&#183;</td></tr></table></td></tr></table>
Note that <i>A</i> <i>A</i><sup><i>j</i></sup> = <i>A</i><sup><i>j</i>+1</sup> for every <i>j</i>. Thus it is possible to choose
all basis elements of weight at least 2 so that <i>b</i><sub><i>i</i></sub> = <i>b</i><sub><i>k</i></sub> <i>b</i><sub><i>l</i></sub> holds for
some <i>k</i> and <i>l</i>, where <i>b</i><sub><i>k</i></sub> is of weight 1 and <i>b</i><sub><i>l</i></sub> is of weight <i>w</i><sub><i>i</i></sub>&#8722;1. 
This feature allows an effective description of <i>A</i> via a <strong>nilpotent 
structure constants table</strong>. This contains the structure constants 
<i>a</i><sub><i>i</i>,<i>j</i>,<i>k</i></sub> for all <i>i</i> with <i>w</i><sub><i>i</i></sub> = 1 and 1  &#8804; <i>j</i>,<i>k</i>  &#8804; <i>d</i>. For <i>i</i> 
with <i>w</i><sub><i>i</i></sub>  &gt;  1 it either contains a description as <i>b</i><sub><i>i</i></sub> = <i>b</i><sub><i>k</i></sub> <i>b</i><sub><i>l</i></sub> or the 
structure constants <i>a</i><sub><i>i</i>,<i>j</i>,<i>k</i></sub> for 1  &#8804; <i>j</i>,<i>k</i>  &#8804; <i>d</i>. It may also 
contain both or some partial overlap of these informations.
<p>
<p>
<hr>Isomorphisms and Automorphisms
<p>
Let <i>A</i> be a finite dimensional nilpotent associative algebra over a 
finite field. This package contains an implementation of the methods 
in <a href="biblio.htm#Eic07"><cite>Eic07</cite></a> which allow the determination of the automorphism group 
<i>Aut</i>(<i>A</i>) and a <strong>canonical form</strong> <i>Can</i>(<i>A</i>). 
<p>
The automorphism group is given by generators and is represented as a
subgroup of <i>GL</i>(<i>dim</i>(<i>A</i>), <i>F</i>). Also the order of <i>Aut</i>(<i>A</i>) is available.
<p>
A canonical form <i>Can</i>(<i>A</i>) for <i>A</i> is a nilpotent structure constants 
table for <i>A</i> which is unique for the isomorphism type of <i>A</i>; 
that is, two algebras <i>A</i> and <i>B</i> are isomorphic if and only if <i>Can</i>(<i>A</i>) = <i>Can</i>(<i>B</i>) holds. Hence the canonical form can be used to solve the 
isomorphism problem. 
<p>
<p>
<hr>The Modular Isomorphism Problem
<p>
The modular isomorphism problem asks whether an isomorphism of algebras <b>F</b><sub><i>p</i></sub> <i>G</i>  &#8773; <b>F</b><sub><i>p</i></sub> <i>H</i> implies
an isomorphism of groups <i>G</i>  &#8773; <i>H</i> for two <i>p</i>-groups <i>G</i> and <i>H</i> and <b>F</b><sub><i>p</i></sub> the field with <i>p</i>
elements. This problem was open for a long time until first counterexamples
for the prime <i>p</i>=2 were found in <a href="biblio.htm#GLMdR22"><cite>GLMdR22</cite></a>. It remains open for odd
primes and many other interesting classes of groups.
<p>
Computational approaches have been used to investigate the modular isomorphism
problem. Based on an algorithm by Roggenkamp and Scott <a href="biblio.htm#RS93"><cite>RS93</cite></a>, Wursthorn
<a href="biblio.htm#Wur93"><cite>Wur93</cite></a> described an algorithm for checking the modular isomorphism
problem; that is, he described an algorithm for checking whether two modular
group algebras <b>F</b><sub><i>p</i></sub> <i>G</i> and <b>F</b><sub><i>p</i></sub> <i>H</i> are isomorphic, where <i>G</i> and <i>H</i> are finite
<i>p</i>-groups. This algorithm has been
implemented in C by Wursthorn and has been applied to the groups of
order dividing 2<sup>7</sup> without finding a counterexample, see <a href="biblio.htm#BKRW99"><cite>BKRW99</cite></a>.
The implementation of Wursthorn appears lost, but is in any case not publicly
available.
<p>
<p>
This package contains an implementation of the new algorithm described in
<a href="biblio.htm#Eic07"><cite>Eic07</cite></a> for checking isomorphism of modular group algebras. It is based
on the fact that the Jacobson radical <i>J</i>(<i>FG</i>) is nilpotent if <i>FG</i> is a 
modular group algebra for <i>G</i> a finite <i>p</i>-group and <i>FG</i> is isomorphic to <i>FH</i> if and only if the radicals
<i>J</i>(<i>FG</i>) and <i>J</i>(<i>FH</i>) are isomorphic. Hence the automorphism group and canonical form 
algorithm of this package apply and can be used to solve the isomorphism
problem for modular group algebras of finite <i>p</i>-groups. Note that in this setting the Jacobson radical of the group algebra <i>FG</i> equals its augmentation ideal.
<p>
The methods of this package have been used to study the modular isomorphism
problem for the groups of order dividing 3<sup>6</sup> and 2<sup>8</sup> (<a href="biblio.htm#Eic07"><cite>Eic07</cite></a>) and
for the groups of order 2<sup>9</sup> (<a href="biblio.htm#EKo11"><cite>EKo11</cite></a>). It was later used to study also 
groups of order 3<sup>7</sup> and 5<sup>6</sup> (<a href="biblio.htm#MM22"><cite>MM22</cite></a>).
<p>
<p>
A property of a group <i>G</i> is called <strong><i>F</i>-invariant</strong>, if an isomorphism of
<i>F</i>-algebras <i>FG</i>  &#8773; <i>FH</i> implies the same property for <i>H</i>. In the context
of the Modular Isomorphism Problem, if <i>G</i> is a finite <i>p</i>-group, then an 
<b>F</b><sub><i>p</i></sub>-invariant is simply called 
<strong>invariant</strong>. Many invariants of <i>G</i> are known and the package provides
functions for them, as well as programs which easily allow to compare all
the implemented invariants quickly for a given list of groups.
<p>
<p>
It also remains open, if replacing the field <b>F</b><sub><i>p</i></sub> in the Modular Isomorphism
Problem with a bigger field of characteristic <i>p</i> will change the outcome
of the problem for a given pair of groups. The package includes several 
functions which allow to investigate this question by applying the algorithm
for the same groups varying the field.
<p>
<p>
<hr>A nilpotent quotient algorithm
<p>
Given a finitely presented associative algebra <i>A</i> over an arbitrary
field <i>F</i>, this package contains an algorithm to determine a nilpotent
structure constants table for the class-<i>c</i> nilpotent quotient of <i>A</i>,
i.e. the algebra <i>A</i>/<i>A</i><sup><i>c</i>+1</sup>. 
See <a href="biblio.htm#Eic11"><cite>Eic11</cite></a> for details on the underlying algorithm.
<p>
<p>
<hr>Kurosh Algebras
<p>
Let <i>F</i>(<i>d</i>,<i>F</i>) denote the free non-unital associative algebra on <i>d</i> 
generators over the field <i>F</i>. Then 
<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"><i>A</i>(<i>d</i>,<i>n</i>,<i>F</i>) = <i>F</i>(<i>d</i>,<i>F</i>) / &#9001;&#9001;<i>w</i><sup><i>n</i></sup>  | <i>w</i>  &#8712; <i>F</i>(<i>d</i>,<i>F</i>) &#9002;&#9002;</td></tr></table></td></tr></table>
is the <strong>Kurosh Algebra</strong> on <i>d</i> generators of exponent <i>n</i> over the field
<i>F</i>. Kurosh Algebras can be considered as an algebra-theoretic analogue to 
Burnside groups. 
<p>
This package contains a method that allows to determine <i>A</i>(<i>d</i>,<i>n</i>,<i>F</i>) for
given <i>d</i>, <i>n</i>, <i>F</i>. This can also be used to determine <i>A</i>(<i>d</i>,<i>n</i>,<i>F</i>) for all
fields of a given characteristic. We refer to <a href="biblio.htm#Eic11"><cite>Eic11</cite></a> for details on
the algorithms.
<p>
This package also contains a database of Kurosh Algebras that have been
determined with the methods of this package. 
<p>
<p>
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP002.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>ModIsom manual<br>August 2024
</address></body></html>